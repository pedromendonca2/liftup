// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  age       Int?
  sex       Sex?
  height    Float?
  weight    Float?
  workouts  Workout[]
}

// Modelo para os Treinos criados pelos usuários
model Workout {
  id                  Int                @id @default(autoincrement())
  name                String
  description         String?
  targetMuscleGroup   String?            // "Conjunto muscular alvo"
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  // Relacionamento com o Usuário
  user                User               @relation(fields: [userId], references: [id])
  userId              Int

  // Relacionamento com os Exercícios (via tabela de junção)
  exercises           WorkoutExercise[]
}

// Modelo para os Exercícios disponíveis
model Exercise {
  id            Int                @id @default(autoincrement())
  name          String             @unique
  targetMuscle  String?            // "Músculo Alvo"
  
  // Relacionamento com os Treinos (via tabela de junção)
  workouts      WorkoutExercise[]
}

// Tabela de junção para o relacionamento Muitos-para-Muitos entre Workout e Exercise
// Permite que um exercício esteja em vários treinos e vice-versa.
model WorkoutExercise {
  workout       Workout    @relation(fields: [workoutId], references: [id])
  workoutId     Int
  exercise      Exercise   @relation(fields: [exerciseId], references: [id])
  exerciseId    Int
  
  reps          Int        // "Repetições"
  loadKg        Float      // "CargaKG"
  isCompleted   Boolean    @default(false) // "Concluído"
  
  // Chave primária composta para garantir que cada exercício seja único por treino
  @@id([workoutId, exerciseId])
}


// Enum para o sexo biológico, mais descritivo que um Boolean
enum Sex {
  MASCULINO
  FEMININO
}
